
AVRA   Ver. 1.2.3 system-spi-test.asm Mon Mar  4 12:53:54 2013


          .include "m8def.inc"
         ;***************************************************************************
         ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
         ;* 
         ;* Number				:AVR000
         ;* File Name			:"m8def.inc"
         ;* Title				:Register/Bit Definitions for the ATmega8
         ;* Date                 :07.09.2001
         ;* Version              :1.00
         ;* Support E-mail		:avr@atmel.no
         ;* Target MCU			:ATmega8
         ;*
         ;* DESCRIPTION
         ;* When including this file in the assembly program file, all I/O register	
         ;* names and I/O register bit names appearing in the data book can be used.
         ;* In addition, the six registers forming the three data pointers X, Y and
         ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
         ;* SRAM is also defined 
         ;*
         ;* The Register names are represented by their hexadecimal address.
         ;* 
         ;* The Register Bit names are represented by their bit number (0-7).
         ;* 
         ;* Please observe the difference in using the bit names with instructions
         ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc" 
         ;* (skip if bit in register set/cleared). The following example illustrates
         ;* this:
         ;* 
         ;* in	r16,PORTB				;read PORTB latch
         ;* sbr	r16,(1<<PB6)+(1<<PB5)	;set PB6 and PB5 (use masks, not bit#)
         ;* out  PORTB,r16				;output to PORTB
         ;*
         ;* in	r16,TIFR				;read the Timer Interrupt Flag Register
         ;* sbrc	r16,TOV0				;test the overflow flag (use bit#)
         ;* rjmp	TOV0_is_set				;jump if set
         ;* ...							;otherwise do something else
         ;***************************************************************************
         
         ;***** Specify Device
          .device ATmega8
         
         ;***** I/O Register Definitions
          .equ	SREG	=$3f
          .equ	SPH		=$3e
          .equ	SPL		=$3d
          .equ	GIMSK	=$3b
          .equ	GICR	=$3b		; new name for GIMSK
          .equ	GIFR	=$3a
          .equ	TIMSK	=$39
          .equ	TIFR	=$38
          .equ	SPMCR	=$37
          .equ    I2CR    =$36
          .equ    TWCR    =$36
          .equ    MCUCR   =$35
          .equ    MCUSR   =$34		; For compatibility, 
          .equ    MCUCSR  =$34		; keep both names until further
          .equ	TCCR0	=$33
          .equ	TCNT0	=$32
          .equ    OSCCAL  =$31
          .equ    SFIOR   =$30
          .equ	TCCR1A	=$2f
          .equ	TCCR1B	=$2e
          .equ	TCNT1H	=$2d
          .equ	TCNT1L	=$2c
          .equ	OCR1AH	=$2b
          .equ	OCR1AL	=$2a
          .equ	OCR1BH	=$29
          .equ	OCR1BL	=$28
          .equ	ICR1H	=$27
          .equ	ICR1L	=$26
          .equ	TCCR2	=$25
          .equ	TCNT2	=$24
          .equ	OCR2	=$23
          .equ	ASSR	=$22
          .equ	WDTCR	=$21
          .equ    UBRRH   =$20		;  Note! UCSRC equals UBRRH
          .equ	EEARH	=$1f
          .equ	EEARL	=$1e
          .equ	EEDR	=$1d
          .equ	EECR	=$1c
          .equ	PORTB	=$18
          .equ	DDRB	=$17
          .equ	PINB	=$16
          .equ	PORTC	=$15
          .equ	DDRC	=$14
          .equ	PINC	=$13
          .equ	PORTD	=$12
          .equ	DDRD	=$11
          .equ	PIND	=$10
          .equ	SPDR	=$0f
          .equ	SPSR	=$0e
          .equ	SPCR	=$0d
          .equ	UDR	=$0c
          .equ	UCSRA	=$0b
          .equ	UCSRB	=$0a
          .equ	UCSRC	=$20		;  Note! UCSRC equals UBRRH
          .equ	UBRRL	=$09
          .equ	ACSR	=$08
          .equ    ADMUX   =$07
          .equ    ADCSR   =$06
          .equ	ADCSRA	=$06
          .equ    ADCH    =$05
          .equ    ADCL    =$04
          .equ    I2DR    =$03
          .equ    I2AR    =$02
          .equ    I2SR    =$01
          .equ    I2BR    =$00
          .equ    TWDR    =$03
          .equ    TWAR    =$02
          .equ    TWSR    =$01
          .equ    TWBR    =$00
         
         
         
         ;***** Bit Definitions
         ;GICR  (former GIMSK)
          .equ	INT1	=7
          .equ	INT0	=6
          .equ	IVSEL	=1		; interrupt vector select
          .equ	IVCE	=0		; interrupt vector change enable
         
         ;GIFR
          .equ	INTF1	=7
          .equ	INTF0	=6
         
         ;TIMSK
          .equ    TOIE0   =0
          .equ    TOIE1   =2
          .equ    OCIE1B  =3
          .equ    OCIE1A  =4
          .equ    TICIE1  =5
          .equ    TOIE2   =6
          .equ    OCIE2   =7
         
         ;TIFR
          .equ    TOV0    =0
          .equ    TOV1    =2
          .equ    OCF1B   =3
          .equ    OCF1A   =4
          .equ    ICF1    =5
          .equ    TOV2    =6
          .equ    OCF2    =7
         
         ;SPMCR
          .equ	SPMIE	=7
          .equ	RWWSB	=6
          .equ	RWWSRE	=4
          .equ	BLBSET	=3
          .equ	PGWRT	=2
          .equ	PGERS	=1
          .equ	SPMEN	=0
         
         ;MCUCR
          .equ    SE      =7
          .equ    SM2     =6
          .equ    SM1     =5
          .equ    SM0     =4
          .equ    ISC11   =3
          .equ    ISC10   =2
          .equ    ISC01   =1
          .equ    ISC00   =0
         
         ;MCUCSR
          .equ    WDRF    =3
          .equ    BORF    =2
          .equ    EXTRF   =1
          .equ    PORF    =0
         
         ;TCCR0
          .equ	CS02	=2
          .equ	CS01	=1
          .equ	CS00	=0
         
         ;TCCR1A
          .equ	COM1A1	=7
          .equ	COM1A0	=6
          .equ	COM1B1	=5
          .equ	COM1B0	=4
          .equ	FOC1A	=3
          .equ	FOC1B	=2
          .equ	PWM11	=1	; OBSOLETE! Use WGM11
          .equ	PWM10	=0	; OBSOLETE! Use WGM10
          .equ	WGM11	=1
          .equ	WGM10	=0
         ;TCCR1B
          .equ	ICNC1	=7
          .equ	ICES1	=6
          .equ	CTC11	=4	; OBSOLETE! Use WGM13
          .equ	CTC10	=3	; OBSOLETE! Use WGM12
          .equ	WGM13	=4
          .equ	WGM12	=3	
          .equ	CTC1	=3		; Obsolete - Included for backward compatibility
          .equ	CS12	=2
          .equ	CS11	=1
          .equ	CS10	=0
         
         ;TCCR2
          .equ	FOC2	=7
          .equ    PWM2    =6	; OBSOLETE! Use WGM20
          .equ	WGM20	=6	
          .equ    COM21   =5
          .equ    COM20   =4
          .equ    CTC2    =3	; OBSOLETE! Use WGM21
          .equ	WGM21	=3	
          .equ    CS22    =2
          .equ    CS21    =1
          .equ    CS20    =0
         
         ;SFIOR
          .equ    ADHSM   =4
          .equ    ACME    =3
          .equ    PUD     =2
          .equ	PSR2	=1
          .equ	PSR10	=0
         
         ;WDTCR
          .equ	WDCE	=4
          .equ	WDTOE	=4
          .equ	WDE	=3
          .equ	WDP2	=2
          .equ	WDP1	=1
          .equ	WDP0	=0
         
         ;EECR
          .equ    EERIE   =3
          .equ	EEMWE	=2
          .equ	EEWE	=1
          .equ	EERE	=0
         
         ;PORTB
          .equ	PB7	=7
          .equ	PB6	=6
          .equ	PB5	=5
          .equ	PB4	=4
          .equ	PB3	=3
          .equ	PB2	=2
          .equ	PB1	=1
          .equ	PB0	=0
         
         ;DDRB
          .equ	DDB7	=7
          .equ	DDB6	=6
          .equ	DDB5	=5
          .equ	DDB4	=4
          .equ	DDB3	=3
          .equ	DDB2	=2
          .equ	DDB1	=1
          .equ	DDB0	=0
         
         ;PINB
          .equ	PINB7	=7
          .equ	PINB6	=6
          .equ	PINB5	=5
          .equ	PINB4	=4
          .equ	PINB3	=3
          .equ	PINB2	=2
          .equ	PINB1	=1
          .equ	PINB0	=0
         
         ;PORTC
          .equ	PC6	=6
          .equ	PC5	=5
          .equ	PC4	=4
          .equ	PC3	=3
          .equ	PC2	=2
          .equ	PC1	=1
          .equ	PC0	=0
         
         ;DDRC
          .equ	DDC6	=6
          .equ	DDC5	=5
          .equ	DDC4	=4
          .equ	DDC3	=3
          .equ	DDC2	=2
          .equ	DDC1	=1
          .equ	DDC0	=0
         
         ;PINC
          .equ	PINC6	=6
          .equ	PINC5	=5
          .equ	PINC4	=4
          .equ	PINC3	=3
          .equ	PINC2	=2
          .equ	PINC1	=1
          .equ	PINC0	=0
         
         ;PORTD
          .equ	PD7	=7
          .equ	PD6	=6
          .equ	PD5	=5
          .equ	PD4	=4
          .equ	PD3	=3
          .equ	PD2	=2
          .equ	PD1	=1
          .equ	PD0	=0
         
         ;DDRD
          .equ	DDD7	=7
          .equ	DDD6	=6
          .equ	DDD5	=5
          .equ	DDD4	=4
          .equ	DDD3	=3
          .equ	DDD2	=2
          .equ	DDD1	=1
          .equ	DDD0	=0
         
         ;PIND
          .equ	PIND7	=7
          .equ	PIND6	=6
          .equ	PIND5	=5
          .equ	PIND4	=4
          .equ	PIND3	=3
          .equ	PIND2	=2
          .equ	PIND1	=1
          .equ	PIND0	=0
         
         ;UCSRA
          .equ	RXC	=7
          .equ	TXC	=6
          .equ	UDRE	=5
          .equ	FE	=4
          .equ	OR	=3		; old name kept for compatibilty
          .equ	DOR	=3
          .equ	UPE	=2
          .equ	PE	=2
          .equ	U2X	=1
          .equ	MPCM	=0
         
         ;UCSRB
          .equ	RXCIE	=7
          .equ	TXCIE	=6
          .equ	UDRIE	=5
          .equ	RXEN	=4
          .equ	TXEN	=3
          .equ	CHR9	=2		; old name kept for compatibilty
          .equ	UCSZ2	=2
          .equ	RXB8	=1
          .equ	TXB8	=0
         
         ;UCSRC
          .equ	URSEL	=7
          .equ	UMSEL	=6
          .equ	UPM1	=5
          .equ	UPM0	=4
          .equ	USBS	=3
          .equ	UCSZ1	=2
          .equ	UCSZ0	=1
          .equ	UCPOL	=0
         		
         ;SPCR
          .equ	SPIE	=7
          .equ	SPE	=6
          .equ	DORD	=5
          .equ	MSTR	=4
          .equ	CPOL	=3
          .equ	CPHA	=2
          .equ	SPR1	=1
          .equ	SPR0	=0
         
         ;SPSR
          .equ	SPIF	=7
          .equ	WCOL	=6
          .equ	SPI2X	=0
         
         ;ACSR
          .equ	ACD	=7
          .equ    ACBG    =6
          .equ	ACO	=5
          .equ	ACI	=4
          .equ	ACIE	=3
          .equ	ACIC	=2
          .equ	ACIS1	=1
          .equ	ACIS0	=0
         
         ;ADMUX
          .equ    REFS1   =7
          .equ    REFS0   =6
          .equ    ADLAR   =5
          .equ    MUX3    =3
          .equ    MUX2    =2
          .equ    MUX1    =1
          .equ    MUX0    =0
         
         ;ADCSR
          .equ    ADEN    =7
          .equ    ADSC    =6
          .equ    ADFR    =5
          .equ    ADIF    =4
          .equ    ADIE    =3
          .equ    ADPS2   =2
          .equ    ADPS1   =1
          .equ    ADPS0   =0
         
         ; TWCR
          .equ    TWINT   =7
          .equ    TWEA    =6
          .equ    TWSTA   =5
          .equ    TWSTO   =4
          .equ    TWWC    =3
          .equ    TWEN    =2
         
          .equ    TWIE    =0
         
         ; TWAR
          .equ    TWA6    =7
          .equ    TWA5    =6
          .equ    TWA4    =5
          .equ    TWA3    =4
          .equ    TWA2    =3
          .equ    TWA1    =2
          .equ    TWA0    =1
          .equ    TWGCE   =0
         
         ; TWSR
          .equ    TWS7    =7
          .equ    TWS6    =6
          .equ    TWS5    =5
          .equ    TWS4    =4
          .equ    TWS3    =3
          .equ	TWPS1	=1
          .equ	TWPS0	=0
         
         ;ASSR
          .equ    AS2     =3
          .equ    TCN2UB  =2
          .equ    OCR2UB  =1
          .equ    TCR2UB  =0
         
          .def	XL	=r26
          .def	XH	=r27
          .def	YL	=r28
          .def	YH	=r29
          .def	ZL	=r30
          .def	ZH	=r31
         
          .equ 	RAMEND =$45F
          .equ	FLASHEND =$FFF
         
         						;  byte groups
         						;  /\/--\/--\/--\ 
          .equ 	SMALLBOOTSTART	=0b00111110000000  ;($0F80) smallest boot block is 256
          .equ 	SECONDBOOTSTART	=0b00111100000000  ;($0F00) 2'nd boot block size is 512
          .equ 	THIRDBOOTSTART	=0b00111000000000  ;($0E00) third boot block size is 1K
          .equ 	LARGEBOOTSTART	=0b00110000000000  ;($0C00) largest boot block is 2K
          .equ 	BOOTSTART		=THIRDBOOTSTART  ;OBSOLETE!!! kept for compatibility
          .equ	PAGESIZE		=32     ;number of WORDS in a page
         
          .equ	INT0addr=$001	; External Interrupt0 Vector Address
          .equ	INT1addr=$002	; External Interrupt1 Vector Address
          .equ	OC2addr =$003	; Output Compare2 Interrupt Vector Address
          .equ	OVF2addr=$004	; Overflow2 Interrupt Vector Address
          .equ	ICP1addr=$005	; Input Capture1 Interrupt Vector Address
          .equ	OC1Aaddr=$006	; Output Compare1A Interrupt Vector Address
          .equ	OC1Baddr=$007	; Output Compare1B Interrupt Vector Address
          .equ	OVF1addr=$008	; Overflow1 Interrupt Vector Address
          .equ	OVF0addr=$009	; Overflow0 Interrupt Vector Address
          .equ	SPIaddr =$00a	; SPI Interrupt Vector Address
          .equ	URXCaddr=$00b	; USART Receive Complete Interrupt Vector Address
          .equ	UDREaddr=$00c	; USART Data Register Empty Interrupt Vector Address
          .equ	UTXCaddr=$00d	; USART Transmit Complete Interrupt Vector Address
          .equ	ADCCaddr=$00e	; ADC Interrupt Vector Address
          .equ	ERDYaddr=$00f	; EEPROM Interrupt Vector Address
          .equ	ACIaddr =$010	; Analog Comparator Interrupt Vector Address
          .equ    TWIaddr =$011   ; Irq. vector address for Two-Wire Interface
          .equ	SPMaddr =$012	; SPM complete Interrupt Vector Address
          .equ	SPMRaddr =$012	; SPM complete Interrupt Vector Address
         ; fosc = 8MHz
         ; Fuse-bits : MSB ... LSB (76543210)
         ;   High byte: 11011111
         ;   Low byte : 11100100
         
          .equ FIRST_STEP_SPI = $84
          .equ SECOND_STEP_SPI = $03
         
          .def temp = r22
          .def temp2 = r18
          .def dataTemp = r21
          .def driveN = r19
          .def stepsN = r20
         ; формируем задержку
          .def Razr0 = r25
          .def Razr1 = r23
          .def Razr2 = r24
         ; 25 мс
          .equ Waiting0 = 0b01000000
          .equ Waiting1 = 0b10011100
          .equ Waiting2 = 0b00000001
         
         ; ----------------------------------
         ; подтверждение при передаче по uart - C5
          .equ UART_ACK = 0b11000101
         
          .def tempBaudRateH = r17
          .def tempBaudRateL = r16
          .equ DDR_SPI = DDRB
          .equ DD_SCK = DDB5
          .equ DD_MISO = DDB4
          .equ DD_MOSI = DDB3
          .equ DD_SS = DDB2
          .equ PORT_SPI = PORTB
         
         ; uart baudrate coeff
          .equ uart_baudrate_h = 0b00000000
          .equ uart_baudrate_l = 0b00110011
         
         ; zero address
C:000000 c000      rjmp MAIN;
         
         ; ------------ MAIN --------------
          MAIN:
           ; configurations block
         	; сразу же отключаем прерывания
C:000001 94f8      	cli
           ; stack init
C:000002 e56f      	ldi temp, low(RAMEND);
C:000003 e024      	ldi temp2, high(RAMEND);
C:000004 bf2e      	out SPH, temp2;
C:000005 bf6d      	out SPL, temp;
         
           ; communications configuration
C:000006 d03e      	rcall ConfigPorts;
C:000007 d045      	rcall SPI_MasterInit;
C:000008 d054      	rcall UART_Init;
         
          main_cycle:
           ; ожидаем приема от ПК по uart
         ;	rcall UART_Rcv
         ;	mov driveN, dataTemp ; номер двигателя
         
         	; немного выжидаем
C:000009 d070      	rcall Waiting_some_ms_proc
         
         	; отправляем подтверждение
         ;	ldi dataTemp, UART_ACK
         ;	rcall UART_Snd
         
         	; немного выжидаем
         ;	rcall Waiting_some_ms_proc
         
         	; получаем число (полушагов)
         ;	rcall UART_Rcv
         ;	mov stepsN, dataTemp ; число шагов
         
C:00000a e050      	ldi dataTemp, $00
         	; включаем ведомый МК
C:00000b d062      	rcall select_Drive
         	; немного выжидаем
C:00000c d06d      	rcall Waiting_some_ms_proc
         	; передаем число шагов для выполнения
C:00000d e854      	ldi dataTemp, $84
C:00000e d045      	rcall SPI_MasterTransmit
         ; CHECK TRANSMITTER OF SLAVE
C:00000f 3053      	cpi dataTemp, SECOND_STEP_SPI;0b11100001
C:000010 f409      	brne Got_Wrong1
C:000011 c002      	rjmp Got_Ok1
          	Got_Wrong1:
C:000012 9ac0      	sbi PORTB, 0
C:000013 c001      	rjmp Next_Step1
          	Got_Ok1:
C:000014 98c0      	cbi PORTB, 0
          	Next_Step1:
         	; немного выжидаем
C:000015 d064      	rcall Waiting_some_ms_proc
         	; отключаем ведомый МК
C:000016 d05d      	rcall deselect_Drives
         	; немного выжидаем
C:000017 d062      	rcall Waiting_some_ms_proc
C:000018 d061      	rcall Waiting_some_ms_proc
C:000019 d060      	rcall Waiting_some_ms_proc
C:00001a d05f      	rcall Waiting_some_ms_proc
C:00001b d05e      	rcall Waiting_some_ms_proc
C:00001c d05d      	rcall Waiting_some_ms_proc
C:00001d d05c      	rcall Waiting_some_ms_proc
C:00001e d05b      	rcall Waiting_some_ms_proc
C:00001f d05a      	rcall Waiting_some_ms_proc
C:000020 d059      	rcall Waiting_some_ms_proc
C:000021 d058      	rcall Waiting_some_ms_proc
C:000022 d057      	rcall Waiting_some_ms_proc
C:000023 d056      	rcall Waiting_some_ms_proc
C:000024 d055      	rcall Waiting_some_ms_proc
C:000025 d054      	rcall Waiting_some_ms_proc
C:000026 d053      	rcall Waiting_some_ms_proc
         	; и в обратную сторону...
C:000027 e050      	ldi dataTemp, $00
         	; включаем ведомый МК
C:000028 d045      	rcall select_Drive
         	; немного выжидаем
C:000029 d050      	rcall Waiting_some_ms_proc
         	; передаем число шагов для выполнения
C:00002a e053      	ldi dataTemp, SECOND_STEP_SPI
C:00002b d028      	rcall SPI_MasterTransmit
         ; CHECK TRANSMITTER OF SLAVE
C:00002c 3854      	cpi dataTemp, FIRST_STEP_SPI;0b11100001
C:00002d f409      	brne Got_Wrong2
C:00002e c002      	rjmp Got_Ok2
          	Got_Wrong2:
C:00002f 9ac1      	sbi PORTB, 1
C:000030 c001      	rjmp Next_Step2
          	Got_Ok2:
C:000031 98c1      	cbi PORTB, 1
          	Next_Step2:
         	; немного выжидаем
C:000032 d047      	rcall Waiting_some_ms_proc
         	; отключаем ведомый МК
C:000033 d040      	rcall deselect_Drives
C:000034 d045      	rcall Waiting_some_ms_proc
C:000035 d044      	rcall Waiting_some_ms_proc
C:000036 d043      	rcall Waiting_some_ms_proc
C:000037 d042      	rcall Waiting_some_ms_proc
C:000038 d041      	rcall Waiting_some_ms_proc
C:000039 d040      	rcall Waiting_some_ms_proc
C:00003a d03f      	rcall Waiting_some_ms_proc
C:00003b d03e      	rcall Waiting_some_ms_proc
C:00003c d03d      	rcall Waiting_some_ms_proc
C:00003d d03c      	rcall Waiting_some_ms_proc
C:00003e d03b      	rcall Waiting_some_ms_proc
C:00003f d03a      	rcall Waiting_some_ms_proc
C:000040 d039      	rcall Waiting_some_ms_proc
C:000041 d038      	rcall Waiting_some_ms_proc
C:000042 d037      	rcall Waiting_some_ms_proc
C:000043 d036      	rcall Waiting_some_ms_proc
         	; говорим ПК, что мы передали ведомому МК данные
         ;	ldi dataTemp, UART_ACK
         ;	rcall UART_Snd
C:000044 cfc4      	rjmp main_cycle;
         
         ; ------------------------------- MAIN FINISHED -----------------------------
         
         ; ----------- PROCS ------------
         ; configure ports
         ; In - NONE
         ; Out - NONE
          ConfigPorts:
         	; config drive selector (PORTC) - 0,1,2,3,4,5 - out, 6 - in
C:000045 e36f      	ldi temp, 0b00111111;
C:000046 bb64      	out DDRC, temp;
         	; config (PORTB) - 0, MOSI, SCK, [0, 1, 2 - unsused,for safety] - out, MISO - in.
C:000047 e26f      	ldi temp, 0b00101111;
C:000048 bb67      	out DDRB, temp;
         	; config UART (PORTD) - 1,2,3,4,5,6,7 - out, 0 - in
C:000049 ef6e      	ldi temp, 0b11111110;
C:00004a bb61      	out DDRD, temp;
         	; globaly disable interrupts
C:00004b 94f8      	cli;
C:00004c 9508      	ret
         
         ; allow SPI
         ; In - NONE
         ; Out - NONE
          SPI_MasterInit:
         ; Set MOSI and SCK direction to output, all others are set to input
C:00004d e26c      	ldi temp, (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS)
C:00004e bb67      	out DDR_SPI,temp
C:00004f e164      	ldi temp, (1<<DD_MISO)|(1<<DD_SS)
C:000050 bb68      	out PORT_SPI, temp
         	; Enable SPI, Master, set clock rate fck/4
C:000051 e560      	ldi temp, (1<<SPE)|(1<<MSTR);|(1<<SPR0);|(1<<SPR1)|(1<<SPR0)
C:000052 b96d      	out SPCR, temp
C:000053 9508      	ret
         
         ; SPI tranmition as master
         ; In - dataTemp - byte to be tranmitted
         ; Out - NONE
          SPI_MasterTransmit:
         ; Start transmission of data (r16)
C:000054 b95f      	out SPDR, dataTemp
            Wait_Transmit:
         ; Wait for transmission complete
C:000055 9b77      	sbis SPSR,SPIF
C:000056 cffe      	rjmp Wait_Transmit
C:000057 b15f      	in dataTemp, SPDR
C:000058 9508      	ret
         
         ; SPI recieve routine (it uses FIFO-ed SPI with 0b00000000 data to be sent)
         ; In - NONE
         ; Out - dataTemp - retrieved byte
          SPI_Recieve:
C:000059 2755      	clr dataTemp
C:00005a dff9      	rcall SPI_MasterTransmit
C:00005b b15f      	in dataTemp, SPDR
C:00005c 9508      	ret
         
         ; UART initialization @ 9600 bps
         ; In - NONE
         ; Out - NONE
          UART_Init:
           ; setting baudrate
C:00005d e010      	ldi tempBaudRateH, uart_baudrate_h
C:00005e e303      	ldi tempBaudRateL, uart_baudrate_l
C:00005f bd10      	out UBRRH, tempBaudRateH
C:000060 b909      	out UBRRL, tempBaudRateL
           ; Enable reciever and transmitter
C:000061 e158      	ldi dataTemp, (1<<RXEN)|(1<<TXEN)
C:000062 b95a      	out UCSRB, dataTemp
           ; setting frame format: 8data bits, 2 stop bits
C:000063 e856      	ldi dataTemp, (1<<URSEL)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0)
C:000064 bd50      	out UCSRC, dataTemp
C:000065 9508      	ret
         
         ; UART recieve proc
         ; In - NONE
         ; Out - dataTemp - recieved byte
          UART_Rcv:
C:000066 9b5f      	sbis UCSRA, RXC
C:000067 cffe      	rjmp UART_Rcv
C:000068 b15c      	in dataTemp, UDR
C:000069 9508      	ret
         
         ; UART send proc
         ; In - dataTemp - byte to be transmitted over UART
         ; Out - NONE
          UART_Snd:
C:00006a 9b5d      	sbis UCSRA, UDRE
C:00006b cffe      	rjmp UART_Snd
         ;CheckFinishPrevSnd:
         ;	sbis UCSRA, TXC
         ;	rjmp CheckFinishPrevSnd
C:00006c b95c      	out UDR, dataTemp
C:00006d 9508      	ret
         
         ; select drive
         ; In - dataTemp - drive to select
         ; Out - NONE
          select_Drive:
C:00006e 7057      	andi dataTemp, 0b00000111
C:00006f 6058      	ori dataTemp, 0b00001000
C:000070 bb55      	out PORTC, dataTemp
C:000071 0000      	nop;
C:000072 0000      	nop;
C:000073 9508      	ret
         
         ; deselect drives
         ; In - NONE
         ; Out - dataTemp = 0
          deselect_Drives:
C:000074 2755      	clr dataTemp
C:000075 6350      	ori dataTemp, 0b00110000
C:000076 bb55      	out PORTC, dataTemp
C:000077 0000      	nop;
C:000078 0000      	nop;
C:000079 9508      	ret
         
          Waiting_some_ms_proc:
         	; подождем xxx миллисекунд? ;-)
C:00007a e490      	ldi Razr0, Waiting0
C:00007b e97c      	ldi Razr1, Waiting1
C:00007c e081      	ldi Razr2, Waiting2
            Waiting_some_ms:
C:00007d 5091      	subi Razr0, 1
C:00007e 4070      	sbci Razr1, 0
C:00007f 4080      	sbci Razr2, 0
C:000080 f7e0      	brcc Waiting_some_ms
C:000081 9508      	ret


Segment usage:
   Code      :       130 words (260 bytes)
   Data      :         0 bytes
   EEPROM    :         0 bytes

Assembly completed with no errors.
